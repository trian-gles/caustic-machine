#N canvas 257 23 1487 1315 12;
#X declare -lib timbreID/timbreIDLib;
#N canvas 359 124 1520 957 onsets 0;
#X obj 56 53 inlet~;
#X obj 206 323 outlet;
#X obj 3 4 cnv 10 400 10 empty empty empty 20 12 0 14 -233017 -66577
0;
#X obj 3 4 cnv 10 10 400 empty empty empty 20 12 0 14 -233017 -66577
0;
#X obj 178 173 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144
-1 -1;
#X obj 171 96 r bark-settings;
#X text 308 53 timbreID comes with its own onset detection object:
bark~. See its helpfile for more details. In comparison with bonk~
(the usual onset detection object in Pd) \, bark~ performs very similarly
but has several extra conveniences. Most importantly \, there is a
non-real-time version of the object \, enabling easy parsing of pre-recorded
audio.;
#X obj 146 135 bark~ 1024 256 0.5;
#X obj 336 292 loadbang;
#X msg 336 314 \; bark-settings minvel 15 \; bark-settings debounce
350 \; bark-settings thresh 5 12 \; bark-settings filter_range 20 49
\;;
#X obj 45 361 outlet~;
#X text 308 163 Doing the attack detection in a subpatch with the input
signal connected in series before [bfcc~] guarantees the DSP order.
We first analyze the signal with [bark~] here to look for attacks \,
and if we find one \, spit out a bang to get the most recent BFCC analysis
possible back in the parent patch.;
#X text 558 321 These were good onset detection settings for the audio
files used in this help file., f 22;
#X obj 285 319 outlet;
#X connect 0 0 7 0;
#X connect 0 0 10 0;
#X connect 5 0 7 0;
#X connect 7 0 4 0;
#X connect 7 0 1 0;
#X connect 7 1 13 0;
#X connect 8 0 9 0;
#X restore 210 165 pd onsets;
#X obj 212 79 declare -lib timbreID/timbreIDLib;
#X obj 204 129 inlet~;
#X obj 201 391 outlet;
#X obj 256 390 outlet;
#X obj 509 127 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 1
1;
#X obj 509 147 metro 100;
#X obj 513 168 t b b;
#X obj 407 258 specHarmonicity~ 4096;
#N canvas 505 281 757 408 get-spectrum-and-pitch 0;
#X obj 355 248 mtof;
#X obj 297 199 moses 0;
#X obj 267 324 outlet;
#X obj 65 21 inlet~;
#X obj 65 324 outlet~;
#X obj 195 21 inlet;
#X text 290 53 If you choose to use the "input_fund" feature to specify
the fundamental frequency via [cepstrumPitch~] or [sigmund~] \, do
pitch analysis BEFORE harmonicity measure by putting [sigmund~] in
a series-patched subpatch connected to [specHarmonicity~].;
#X obj 267 280 f;
#X obj 297 177 sigmund~ pitch -npts 4096 -hop 512 -maxfreq 3000;
#X floatatom 277 304 10 0 0 1 Hz - -;
#X connect 0 0 7 1;
#X connect 1 1 0 0;
#X connect 3 0 4 0;
#X connect 3 0 8 0;
#X connect 5 0 7 0;
#X connect 7 0 2 0;
#X connect 7 0 9 0;
#X connect 8 0 1 0;
#X restore 410 205 pd get-spectrum-and-pitch;
#X obj 416 389 outlet;
#X obj 508 393 outlet;
#X obj 291 203 unpack f f;
#X obj 315 152 bonk~;
#X obj 143 391 outlet;
#X obj 564 78 loadbang;
#X obj 408 324 sel -1;
#X obj 507 323 sel -1;
#X obj 502 365 * 2;
#X obj 194 297 specBrightness~ 1020 4800;
#X obj 204 346 expr 4 + ln($f1);
#X text 127 469 env \, brightness \, power \, harmonicity \, inharmonicity
\, spectral flatness;
#X connect 0 0 19 0;
#X connect 0 1 14 0;
#X connect 0 1 19 0;
#X connect 2 0 0 0;
#X connect 2 0 13 0;
#X connect 2 0 9 0;
#X connect 5 0 6 0;
#X connect 6 0 7 0;
#X connect 7 0 8 0;
#X connect 7 1 9 1;
#X connect 8 0 16 0;
#X connect 8 1 17 0;
#X connect 9 0 8 0;
#X connect 9 1 8 1;
#X connect 12 1 4 0;
#X connect 13 1 12 0;
#X connect 15 0 5 0;
#X connect 16 1 10 0;
#X connect 17 1 18 0;
#X connect 18 0 11 0;
#X connect 19 0 20 0;
#X connect 20 0 3 0;
